/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CodeGenerator.java
 *
 * Created on 1-dec-2009, 13:21:52
 */

/**
 *
 * @author oaz
 */
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.xml.parsers.*;
import org.xml.sax.InputSource;
import org.w3c.dom.*;
import java.io.*;


public class CodeGenerator extends javax.swing.JFrame {

    /** Creates new form CodeGenerator */
    public CodeGenerator() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - Fons Laan
    private void initComponents() {
        menuBar = new JMenuBar();
        fileMenu = new JMenu();
        openMenuItem = new JMenuItem();
        saveMenuItem = new JMenuItem();
        saveAsMenuItem = new JMenuItem();
        exitMenuItem = new JMenuItem();
        editMenu = new JMenu();
        cutMenuItem = new JMenuItem();
        copyMenuItem = new JMenuItem();
        pasteMenuItem = new JMenuItem();
        deleteMenuItem = new JMenuItem();
        helpMenu = new JMenu();
        contentsMenuItem = new JMenuItem();
        aboutMenuItem = new JMenuItem();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jScrollPane1 = new JScrollPane();
        taIn = new JTextArea();
        jScrollPane2 = new JScrollPane();
        taOut = new JTextArea();
        bGenerate = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("function Generator");
        setName("this");
        Container contentPane = getContentPane();

        //======== menuBar ========
        {
            menuBar.setName("menuBar");

            //======== fileMenu ========
            {
                fileMenu.setText("File");
                fileMenu.setName("fileMenu");

                //---- openMenuItem ----
                openMenuItem.setText("Open");
                openMenuItem.setName("openMenuItem");
                fileMenu.add(openMenuItem);

                //---- saveMenuItem ----
                saveMenuItem.setText("Save");
                saveMenuItem.setName("saveMenuItem");
                fileMenu.add(saveMenuItem);

                //---- saveAsMenuItem ----
                saveAsMenuItem.setText("Save As ...");
                saveAsMenuItem.setName("saveAsMenuItem");
                fileMenu.add(saveAsMenuItem);

                //---- exitMenuItem ----
                exitMenuItem.setText("Exit");
                exitMenuItem.setName("exitMenuItem");
                exitMenuItem.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        exitMenuItemActionPerformed(e);
                    }
                });
                fileMenu.add(exitMenuItem);
            }
            menuBar.add(fileMenu);

            //======== editMenu ========
            {
                editMenu.setText("Edit");
                editMenu.setName("editMenu");

                //---- cutMenuItem ----
                cutMenuItem.setText("Cut");
                cutMenuItem.setName("cutMenuItem");
                editMenu.add(cutMenuItem);

                //---- copyMenuItem ----
                copyMenuItem.setText("Copy");
                copyMenuItem.setName("copyMenuItem");
                editMenu.add(copyMenuItem);

                //---- pasteMenuItem ----
                pasteMenuItem.setText("Paste");
                pasteMenuItem.setName("pasteMenuItem");
                editMenu.add(pasteMenuItem);

                //---- deleteMenuItem ----
                deleteMenuItem.setText("Delete");
                deleteMenuItem.setName("deleteMenuItem");
                editMenu.add(deleteMenuItem);
            }
            menuBar.add(editMenu);

            //======== helpMenu ========
            {
                helpMenu.setText("Help");
                helpMenu.setName("helpMenu");

                //---- contentsMenuItem ----
                contentsMenuItem.setText("Contents");
                contentsMenuItem.setName("contentsMenuItem");
                helpMenu.add(contentsMenuItem);

                //---- aboutMenuItem ----
                aboutMenuItem.setText("About");
                aboutMenuItem.setName("aboutMenuItem");
                helpMenu.add(aboutMenuItem);
            }
            menuBar.add(helpMenu);
        }
        setJMenuBar(menuBar);

        //---- jLabel1 ----
        jLabel1.setText("XML Functie Omschrijving");
        jLabel1.setName("jLabel1");

        //---- jLabel2 ----
        jLabel2.setText("Java Output");
        jLabel2.setName("jLabel2");

        //======== jScrollPane1 ========
        {
            jScrollPane1.setName("jScrollPane1");

            //---- taIn ----
            taIn.setColumns(20);
            taIn.setRows(5);
            taIn.setName("taIn");
            jScrollPane1.setViewportView(taIn);
        }

        //======== jScrollPane2 ========
        {
            jScrollPane2.setName("jScrollPane2");

            //---- taOut ----
            taOut.setColumns(20);
            taOut.setRows(5);
            taOut.setName("taOut");
            jScrollPane2.setViewportView(taOut);
        }

        //---- bGenerate ----
        bGenerate.setText("jButton1");
        bGenerate.setName("bGenerate");
        bGenerate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                bGenerateActionPerformed(e);
            }
        });

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 415, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 415, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGap(10, 10, 10))
                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bGenerate)
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 401, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 401, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(bGenerate)
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void bGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGenerateActionPerformed
        // TODO add your handling code here:
        String xmlRecords = taIn.getText();

        try {
            DocumentBuilderFactory dbf =
                DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(xmlRecords));

            Document doc = db.parse(is);
            NodeList nodes = doc.getElementsByTagName("veldfunctie");

        // iterate
        for (int i = 0; i < nodes.getLength(); i++) {
            Element element = (Element) nodes.item(i);

            String naam = element.getAttribute("naam");
            String versie = element.getAttribute("versie");
            String auteur = element.getAttribute("auteur");

            NodeList list = element.getElementsByTagName("omschrijving");
            Element line = (Element) list.item(0);
            String omschrijving = getCharacterDataFromElement(line);

            list = element.getElementsByTagName("opmerkingen");
            line = (Element) list.item(0);
            String opmerkingen = getCharacterDataFromElement(line);

            list = element.getElementsByTagName("in");
            line = (Element) list.item(0);
            String in = getCharacterDataFromElement(line);

            list = element.getElementsByTagName("out");
            line = (Element) list.item(0);
            String out = getCharacterDataFromElement(line);

            NodeList stappen = doc.getElementsByTagName("stap");
            //maak arrays met stappen gebruik em omschrijving

            // print
            taOut.append("/**\r\n");
            taOut.append(" * auteur: " + auteur + "\r\n");
            taOut.append(" * versie: " + versie + "\r\n");
            taOut.append(" * Omschrijving: " + omschrijving + "\r\n");
            taOut.append(" * Opmerkingen: " + opmerkingen + "\r\n");
            taOut.append(" */\r\n");
            taOut.append("public UNKNOWN " + naam + "( UNKNOWN " + in + " ) {\r\n");

            // iterate
            for (int j = 0; j < stappen.getLength(); j++) {
                Element stapje = (Element) stappen.item(i);

                String stapgebruik = stapje.getAttribute("gebruik");
                String stapomschrijving = stapje.getAttribute("omschrijving");

                taOut.append("\t// Stap " + (j+1) + "\r\n");
                taOut.append("\t// Omschrijving: " + stapomschrijving + "\r\n");
                taOut.append("\t// Roep aan: " + stapgebruik + "();");
                taOut.append("\r\n");
            }
            taOut.append("\treturn " + out + ";\r\n");
            taOut.append("}");
        }
    }
    catch (Exception e) {
        e.printStackTrace();
    }

        
    }//GEN-LAST:event_bGenerateActionPerformed


  public String getCharacterDataFromElement(Element e) {
    Node child = e.getFirstChild();
    if (child instanceof CharacterData) {
       CharacterData cd = (CharacterData) child;
       return cd.getData();
    }
    return "?";
  }



    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CodeGenerator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Fons Laan
    private JMenuBar menuBar;
    private JMenu fileMenu;
    private JMenuItem openMenuItem;
    private JMenuItem saveMenuItem;
    private JMenuItem saveAsMenuItem;
    private JMenuItem exitMenuItem;
    private JMenu editMenu;
    private JMenuItem cutMenuItem;
    private JMenuItem copyMenuItem;
    private JMenuItem pasteMenuItem;
    private JMenuItem deleteMenuItem;
    private JMenu helpMenu;
    private JMenuItem contentsMenuItem;
    private JMenuItem aboutMenuItem;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JScrollPane jScrollPane1;
    private JTextArea taIn;
    private JScrollPane jScrollPane2;
    private JTextArea taOut;
    private JButton bGenerate;
    // End of variables declaration//GEN-END:variables

}
