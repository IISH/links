/*
 * ReplaceDirectView.java
 */
package replacedirect;

import java.awt.Component;
import java.util.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.JFileChooser;
import java.awt.event.*;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * The application's main frame.
 */
public class ReplaceDirectView extends FrameView {

    private String status = "DISABLED";
    private int linenumber = 0;

    public ReplaceDirectView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // scrollbar options
        jScrollPane4.getVerticalScrollBar().setModel(jScrollPane3.getVerticalScrollBar().getModel());
        jTextArea3.setEditable(false);
        jTextArea4.setEditable(false);
        jTextField1.setEditable(false);
        jTextField2.setEditable(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jButton9.setEnabled(false);
        

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;

            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {

                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - Fons Laan
    private void initComponents() {
        ResourceBundle bundle = ResourceBundle.getBundle("replacedirect.resources.ReplaceDirectView");
        mainPanel = new JPanel();
        jScrollPane2 = new JScrollPane();
        jTextArea2 = new JTextArea();
        jScrollPane3 = new JScrollPane();
        jTextArea3 = new JTextArea();
        jScrollPane4 = new JScrollPane();
        jTextArea4 = new JTextArea();
        jButton1 = new JButton();
        jButton2 = new JButton();
        jSeparator1 = new JSeparator();
        jSeparator2 = new JSeparator();
        jButton3 = new JButton();
        jButton4 = new JButton();
        jLabel1 = new JLabel();
        jButton5 = new JButton();
        jTextField1 = new JTextField();
        jTextField2 = new JTextField();
        jLabel2 = new JLabel();
        jButton6 = new JButton();
        jButton7 = new JButton();
        jButton8 = new JButton();
        jButton9 = new JButton();
        jButton10 = new JButton();
        jLabel3 = new JLabel();
        jTextField3 = new JTextField();
        menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu();
        jMenuItem1 = new JMenuItem();
        jMenuItem2 = new JMenuItem();
        JMenuItem exitMenuItem = new JMenuItem();
        jMenu1 = new JMenu();
        reg1 = new JMenuItem();
        reg2 = new JMenuItem();
        reg3 = new JMenuItem();
        JMenu helpMenu = new JMenu();
        JMenuItem aboutMenuItem = new JMenuItem();
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();

        //======== mainPanel ========
        {
            mainPanel.setName("mainPanel");

            // JFormDesigner evaluation mark
            mainPanel.setBorder(new javax.swing.border.CompoundBorder(
                new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0),
                    "JFormDesigner Evaluation", javax.swing.border.TitledBorder.CENTER,
                    javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12),
                    java.awt.Color.red), mainPanel.getBorder())); mainPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener(){public void propertyChange(java.beans.PropertyChangeEvent e){if("border".equals(e.getPropertyName()))throw new RuntimeException();}});


            //======== jScrollPane2 ========
            {
                jScrollPane2.setName("jScrollPane2");

                //---- jTextArea2 ----
                jTextArea2.setColumns(20);
                jTextArea2.setRows(5);
                jTextArea2.setName("jTextArea2");
                jScrollPane2.setViewportView(jTextArea2);
            }

            //======== jScrollPane3 ========
            {
                jScrollPane3.setName("jScrollPane3");

                //---- jTextArea3 ----
                jTextArea3.setColumns(20);
                jTextArea3.setRows(5);
                jTextArea3.setText(bundle.getString("jTextArea3.text"));
                jTextArea3.setName("jTextArea3");
                jTextArea3.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        jTextArea3MouseClicked(e);
                    }
                });
                jTextArea3.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyPressed(KeyEvent e) {
                        jTextArea3KeyPressed(e);
                    }
                });
                jScrollPane3.setViewportView(jTextArea3);
            }

            //======== jScrollPane4 ========
            {
                jScrollPane4.setName("jScrollPane4");

                //---- jTextArea4 ----
                jTextArea4.setColumns(20);
                jTextArea4.setRows(5);
                jTextArea4.setText(bundle.getString("jTextArea4.text"));
                jTextArea4.setName("jTextArea4");
                jScrollPane4.setViewportView(jTextArea4);
            }

            //---- jButton1 ----
            jButton1.setText(bundle.getString("jButton1.text"));
            jButton1.setName("jButton1");
            jButton1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton1ActionPerformed(e);
                }
            });

            //---- jButton2 ----
            jButton2.setText(bundle.getString("jButton2.text"));
            jButton2.setName("jButton2");
            jButton2.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton2ActionPerformed(e);
                }
            });

            //---- jSeparator1 ----
            jSeparator1.setName("jSeparator1");

            //---- jSeparator2 ----
            jSeparator2.setName("jSeparator2");

            //---- jButton3 ----
            jButton3.setText(bundle.getString("jButton3.text"));
            jButton3.setName("jButton3");
            jButton3.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton3ActionPerformed(e);
                }
            });

            //---- jButton4 ----
            jButton4.setText(bundle.getString("jButton4.text"));
            jButton4.setName("jButton4");
            jButton4.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton4ActionPerformed(e);
                }
            });

            //---- jLabel1 ----
            jLabel1.setText(bundle.getString("jLabel1.text"));
            jLabel1.setName("jLabel1");

            //---- jButton5 ----
            jButton5.setText(bundle.getString("jButton5.text"));
            jButton5.setName("jButton5");
            jButton5.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton5ActionPerformed(e);
                }
            });

            //---- jTextField1 ----
            jTextField1.setText(bundle.getString("jTextField1.text"));
            jTextField1.setName("jTextField1");

            //---- jTextField2 ----
            jTextField2.setText(bundle.getString("jTextField2.text"));
            jTextField2.setName("jTextField2");

            //---- jLabel2 ----
            jLabel2.setText(bundle.getString("jLabel2.text"));
            jLabel2.setName("jLabel2");

            //---- jButton6 ----
            jButton6.setText(bundle.getString("jButton6.text"));
            jButton6.setName("jButton6");
            jButton6.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton6ActionPerformed(e);
                }
            });

            //---- jButton7 ----
            jButton7.setText(bundle.getString("jButton7.text"));
            jButton7.setName("jButton7");
            jButton7.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton7ActionPerformed(e);
                }
            });

            //---- jButton8 ----
            jButton8.setText(bundle.getString("jButton8.text"));
            jButton8.setName("jButton8");
            jButton8.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton8ActionPerformed(e);
                }
            });

            //---- jButton9 ----
            jButton9.setText(bundle.getString("jButton9.text"));
            jButton9.setName("jButton9");
            jButton9.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton9ActionPerformed(e);
                }
            });

            //---- jButton10 ----
            jButton10.setText(bundle.getString("jButton10.text"));
            jButton10.setName("jButton10");
            jButton10.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    jButton10ActionPerformed(e);
                }
            });

            //---- jLabel3 ----
            jLabel3.setText(bundle.getString("jLabel3.text"));
            jLabel3.setName("jLabel3");

            //---- jTextField3 ----
            jTextField3.setText(bundle.getString("jTextField3.text"));
            jTextField3.setName("jTextField3");

            GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
            mainPanel.setLayout(mainPanelLayout);
            mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup()
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup()
                            .addComponent(jSeparator1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 306, Short.MAX_VALUE)
                                .addComponent(jButton10))
                            .addComponent(jSeparator2, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup()
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextField2, GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(jButton6)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton7)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton8)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton9))
                                    .addComponent(jTextField1, GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 242, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 288, GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
            );
            mainPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {jScrollPane3, jScrollPane4});
            mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup()
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton6)
                                    .addComponent(jButton7)
                                    .addComponent(jButton8)
                                    .addComponent(jButton9))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                                .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2))
                            .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(mainPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton1)
                            .addComponent(jButton5)
                            .addComponent(jButton2)
                            .addComponent(jButton10))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 5, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                        .addGap(34, 34, 34))
            );
        }

        //======== menuBar ========
        {
            menuBar.setName("menuBar");

            //======== fileMenu ========
            {
                fileMenu.setText(bundle.getString("fileMenu.text"));
                fileMenu.setName("fileMenu");

                //---- jMenuItem1 ----
                jMenuItem1.setText(bundle.getString("jMenuItem1.text"));
                jMenuItem1.setName("jMenuItem1");
                jMenuItem1.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        jMenuItem1ActionPerformed(e);
                    }
                });
                fileMenu.add(jMenuItem1);

                //---- jMenuItem2 ----
                jMenuItem2.setText(bundle.getString("jMenuItem2.text"));
                jMenuItem2.setName("jMenuItem2");
                jMenuItem2.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        jMenuItem2ActionPerformed(e);
                    }
                });
                fileMenu.add(jMenuItem2);

                //---- exitMenuItem ----
                exitMenuItem.setName("exitMenuItem");
                fileMenu.add(exitMenuItem);
            }
            menuBar.add(fileMenu);

            //======== jMenu1 ========
            {
                jMenu1.setText(bundle.getString("jMenu1.text"));
                jMenu1.setName("jMenu1");

                //---- reg1 ----
                reg1.setText(bundle.getString("reg1.text"));
                reg1.setName("reg1");
                reg1.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        reg1ActionPerformed(e);
                    }
                });
                jMenu1.add(reg1);

                //---- reg2 ----
                reg2.setText(bundle.getString("reg2.text"));
                reg2.setName("reg2");
                reg2.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        reg2ActionPerformed(e);
                    }
                });
                jMenu1.add(reg2);

                //---- reg3 ----
                reg3.setText(bundle.getString("reg3.text"));
                reg3.setName("reg3");
                reg3.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        reg3ActionPerformed(e);
                    }
                });
                jMenu1.add(reg3);
            }
            menuBar.add(jMenu1);

            //======== helpMenu ========
            {
                helpMenu.setText(bundle.getString("helpMenu.text"));
                helpMenu.setName("helpMenu");

                //---- aboutMenuItem ----
                aboutMenuItem.setName("aboutMenuItem");
                helpMenu.add(aboutMenuItem);
            }
            menuBar.add(helpMenu);
        }

        //======== jScrollPane1 ========
        {
            jScrollPane1.setName("jScrollPane1");

            //---- jTextArea1 ----
            jTextArea1.setColumns(20);
            jTextArea1.setRows(5);
            jTextArea1.setName("jTextArea1");
            jScrollPane1.setViewportView(jTextArea1);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:


        try {

            Highlighter h = jTextArea2.getHighlighter();
            h.removeAllHighlights();

            // loop through 
            String[] find = jTextArea3.getText().split("\n");

            for (int i = 0; i < find.length; i++) {

                //kleur
                DefaultHighlighter.DefaultHighlightPainter highlightPainter =
                        new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.GREEN);

                String regex = find[i];
                Pattern p = Pattern.compile(regex.replaceAll("\\^", "\n").replaceAll("\\$", "\n"));

                Matcher matcher = p.matcher(jTextArea2.getText());

                while (matcher.find()) {
                    h.addHighlight(matcher.start(), matcher.end(), highlightPainter);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // loop through 
        String[] find = jTextArea3.getText().split("\n");
        String[] replace = jTextArea4.getText().split("\n");

        for (int i = 0; i < find.length; i++) {

            String replacement = "";
            
            String finder = "";
            String finder1 = "";
            
            if (i < replace.length && !replace[i].equalsIgnoreCase("[REMOVE]")) {
                replacement = replace[i];
            }
            
            if( find[i].contains("^") ){
                find[i] = find[i].replaceAll("\\^", "");
                replacement = "\n" + replacement;
                
                finder = "\n";
            }
            
            if( find[i].contains("$") ){
                find[i] = find[i].replaceAll("\\$", "");
                replacement = replacement + "\n" ;
                
                finder1 = "\n";
            }

            jTextArea2.setText(jTextArea2.getText().replaceAll( finder + find[i] + finder1 , replacement ) ) ;
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextArea3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea3MouseClicked
        // TODO add your handling code here:
        try {

            status = "DISABLED";

            int f = jTextArea3.getCaretPosition();
            int line = jTextArea3.getLineOfOffset(f);

            //satus
            linenumber = line;

            Highlighter h = jTextArea3.getHighlighter();
            h.removeAllHighlights();

            Highlighter h0 = jTextArea4.getHighlighter();
            h0.removeAllHighlights();

            Highlighter h1 = jTextArea2.getHighlighter();
            h1.removeAllHighlights();

            DefaultHighlighter.DefaultHighlightPainter highlightPainter =
                    new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.GREEN);

            // Add highlighter to 
            h.addHighlight(jTextArea3.getLineStartOffset(line), jTextArea3.getLineEndOffset(line), highlightPainter);
            jButton6.setEnabled(true);
            jButton7.setEnabled(true);
            jButton8.setEnabled(false);
            jButton9.setEnabled(true);

            jTextField1.setEditable(false);
            jTextField2.setEditable(false);

            String[] find = jTextArea3.getText().split("\n");
            String[] replace = jTextArea4.getText().split("\n");

            try {
                if (!replace[line].isEmpty()) {
                    h0.addHighlight(jTextArea4.getLineStartOffset(line), jTextArea4.getLineEndOffset(line), highlightPainter);
                }
            } catch (Exception e) {// do nothing YET
            }
            // highlight text
            // loop through 


            // fill in fields
            String em = "";

            if (!replace[line].equalsIgnoreCase("[REMOVE]")) {
                em = replace[line];
            }
            jTextField1.setText(find[line]);
            jTextField2.setText(em);

            String regex = find[line];

            if (!regex.isEmpty()) {
                Pattern p = Pattern.compile(regex.replaceAll("\\^", "\n").replaceAll("\\$", "\n"));

                Matcher matcher = p.matcher(jTextArea2.getText());
                
                int count = 0;

                while (matcher.find()) {
                    count++;
                    h1.addHighlight(matcher.start(), matcher.end(), highlightPainter);
                }
                
                jTextField3.setText(count + "");
            }


        } catch (Exception e) {
        }
    }//GEN-LAST:event_jTextArea3MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

          
        JFileChooser fileopen = new JFileChooser();

        int ret = fileopen.showDialog(null, "Open file");

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
           // jTextArea3.setText(file.getPath());
            
            // now read
            
            String result = null;
        DataInputStream in = null;

        try {
            File f = new File(file.getPath());
            byte[] buffer = new byte[(int) f.length()];
            in = new DataInputStream(new FileInputStream(f));
            in.readFully(buffer);
            result = new String(buffer, "ISO-8859-1");
        } catch (IOException e) {
            throw new RuntimeException("IO problem in fileToString", e);
        } finally {
            try {
                in.close();
            } catch (IOException e) { /* ignore it */
            }
        }
            jTextArea2.setText(result.replaceAll("\r", ""));
        }
    
    
        
        /*
        JFileChooser fileopen = new JFileChooser();

        int ret = fileopen.showDialog(null, "Open file");

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();

            File file1 = new File(file.getPath());
            java.net.URI uri = file1.toURI();
            byte[] bytes = null;
            try {
                bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(uri));
            } catch (Exception e) {
            }

            String s = new String(bytes);

            jTextArea2.setText(s);

        }*/
    }//GEN-LAST:event_jButton3ActionPerformed

    // unlight all
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        Highlighter h = jTextArea3.getHighlighter();
        h.removeAllHighlights();

        Highlighter h0 = jTextArea4.getHighlighter();
        h0.removeAllHighlights();

        Highlighter h1 = jTextArea2.getHighlighter();
        h1.removeAllHighlights();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        JFileChooser fileopen = new JFileChooser();

        int ret = fileopen.showDialog(null, "Save File");

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
            try {

                File newTextFile = new File(file.getPath());
                FileWriter fileWriter = new FileWriter(newTextFile);
                fileWriter.write(jTextArea2.getText());
                fileWriter.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextArea3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea3KeyPressed
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            try {
//                int f = jTextArea3.getCaretPosition();
//                int line = jTextArea3.getLineOfOffset(f);
//                
//                String[] l = jTextArea4.getText().split("\n");
//                
//                String ne = "";
//                for (int i = 0; i < l.length; i++) {
//                    if(line == i){
//                        ne += "[EMPTY]\n";
//                    }
//                    ne += l[i];
//                }
//                
//                // update
//                
//                jTextArea4.setText(ne);
//                
//            } catch (Exception e) {
//            }
//            
//        }
    }//GEN-LAST:event_jTextArea3KeyPressed

    // New
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        // unlight
        jButton5ActionPerformed(null);

        jTextField1.setText("");
        jTextField2.setText("");

        jTextField1.setEditable(true);
        jTextField2.setEditable(true);

        status = "NEW";

        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jButton9.setEnabled(false);
        jButton8.setEnabled(true);


    }//GEN-LAST:event_jButton6ActionPerformed

    // save button
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        if (!jTextField1.getText().isEmpty()) {

            jButton5ActionPerformed(null);

            if (status.equalsIgnoreCase("NEW")) {

                jButton6.setEnabled(true);
                jButton8.setEnabled(false);

                jTextField1.setEditable(false);
                jTextField2.setEditable(false);

                String extra = "";

                if (!jTextArea3.getText().isEmpty()) {
                    extra = "\n";
                }

                String replace = "[REMOVE]";

                if (!jTextField2.getText().isEmpty()) {
                    replace = jTextField2.getText();
                }

                jTextArea3.setText(jTextArea3.getText() + extra + jTextField1.getText());
                jTextArea4.setText(jTextArea4.getText() + extra + replace);
            } else if (status.equalsIgnoreCase("EDIT")) {
                jButton6.setEnabled(true);
                jButton7.setEnabled(false);
                jButton8.setEnabled(false);
                jButton9.setEnabled(false);

                jTextField1.setEditable(false);
                jTextField2.setEditable(false);

                // remove truukje
                // set boxes
                String[] l3 = jTextArea3.getText().split("\n");
                String[] l4 = jTextArea4.getText().split("\n");

                int size = l3.length;

                String ne3 = "";
                String ne4 = "";

                for (int i = 0; i < size; i++) {

                    String extra = "";

                    if (i < (size - 1)) {
                        extra = "\n";
                    }

                    // remove line
                    if (linenumber == i) {
                        ne3 += jTextField1.getText() + extra;
                        
                        String replace = "[REMOVE]";

                if (!jTextField2.getText().isEmpty()) {
                    replace = jTextField2.getText();
                }
                
                        ne4 += replace + extra;
                    } else {
                        ne3 += l3[i] + extra;
                        ne4 += l4[i] + extra;
                    }
                }

                
                
                jTextArea3.setText(ne3);
                jTextArea4.setText(ne4);

                jTextField1.setText("");
                jTextField2.setText("");


                /*
                String extra = "";
                
                if (!jTextArea3.getText().isEmpty()) {
                extra = "\n";
                }
                
                String replace = "[REMOVE]";
                
                if ( !jTextField2.getText().isEmpty() ) {
                replace = jTextField2.getText();
                }
                
                jTextArea3.setText( jTextArea3.getText() + extra +  jTextField1.getText() );
                jTextArea4.setText( jTextArea4.getText() + extra +  replace );*/
            }

            jTextField1.setText("");
            jTextField2.setText("");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    // Remove
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        jButton5ActionPerformed(null);

        jButton6.setEnabled(true);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jButton9.setEnabled(false);

        // set boxes
        String[] l3 = jTextArea3.getText().split("\n");
        String[] l4 = jTextArea4.getText().split("\n");

        int size = l3.length;

        String ne3 = "";
        String ne4 = "";

        for (int i = 0; i < size; i++) {

            String extra = "";

            if (i < (size - 1)) {
                extra = "\n";
            }

            // remove line
            if (linenumber != i) {
                ne3 += l3[i] + extra;
                ne4 += l4[i] + extra;
            }
        }

        jTextArea3.setText(ne3);
        jTextArea4.setText(ne4);

        jTextField1.setText("");
        jTextField2.setText("");

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        jTextField1.setEditable(true);
        jTextField2.setEditable(true);

        status = "EDIT";

        jButton6.setEnabled(true);
        jButton7.setEnabled(false);
        jButton8.setEnabled(true);
        jButton9.setEnabled(true);



    }//GEN-LAST:event_jButton7ActionPerformed

    

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        try {
            Highlighter h = jTextArea3.getHighlighter();
            h.removeAllHighlights();

            Highlighter h0 = jTextArea4.getHighlighter();
            h0.removeAllHighlights();

            DefaultHighlighter.DefaultHighlightPainter highlightPainter =
                    new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.GREEN);

            // Add highlighter to 
            h.addHighlight(0, jTextArea3.getText().length(), highlightPainter);
            h0.addHighlight(0, jTextArea4.getText().length(), highlightPainter);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    
    // open
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileopen = new JFileChooser();

        FileFilter filter = new FileNameExtensionFilter( "RDT File (.rdt)", "rdt");
        fileopen.addChoosableFileFilter(filter);
        int ret = fileopen.showDialog(null, "Open file");

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
           // jTextArea3.setText(file.getPath());
            
            // now read
            
            String result = null;
        DataInputStream in = null;

        try {
            File f = new File(file.getPath());
            byte[] buffer = new byte[(int) f.length()];
            in = new DataInputStream(new FileInputStream(f));
            in.readFully(buffer);
            result = new String(buffer, "ISO-8859-1");
            
            
            
        } catch (IOException e) {
            throw new RuntimeException("IO problem in fileToString", e);
        } finally {
            try {
                in.close();
            } catch (IOException e) { /* ignore it */
            }
        }
            jTextArea3.setText(result.split("XXXXXXXXXX")[0]);
            jTextArea4.setText(result.split("XXXXXXXXXX")[1]);
            
            jButton6.setEnabled(true);
                jButton7.setEnabled(false);
                jButton8.setEnabled(false);
                jButton9.setEnabled(false);
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //save
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileopen = new JFileChooser();

        int ret = fileopen.showSaveDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
            try {
                File newTextFile = new File(file.getPath() + ".rdt");
                FileWriter fileWriter = new FileWriter(newTextFile, false);
                fileWriter.write(jTextArea3.getText() + "XXXXXXXXXX" + jTextArea4.getText());
                fileWriter.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void reg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reg1ActionPerformed
        jTextField1.setText(jTextField1.getText() + "[0-9]+");
    }//GEN-LAST:event_reg1ActionPerformed

    private void reg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reg2ActionPerformed
        jTextField1.setText(jTextField1.getText() + " [ ]+");
    }//GEN-LAST:event_reg2ActionPerformed

    private void reg3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reg3ActionPerformed
        jTextField1.setText(jTextField1.getText() + "\\(.*\\)");
    }//GEN-LAST:event_reg3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Fons Laan
    private JPanel mainPanel;
    private JScrollPane jScrollPane2;
    private JTextArea jTextArea2;
    private JScrollPane jScrollPane3;
    private JTextArea jTextArea3;
    private JScrollPane jScrollPane4;
    private JTextArea jTextArea4;
    private JButton jButton1;
    private JButton jButton2;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JButton jButton3;
    private JButton jButton4;
    private JLabel jLabel1;
    private JButton jButton5;
    private JTextField jTextField1;
    private JTextField jTextField2;
    private JLabel jLabel2;
    private JButton jButton6;
    private JButton jButton7;
    private JButton jButton8;
    private JButton jButton9;
    private JButton jButton10;
    private JLabel jLabel3;
    private JTextField jTextField3;
    private JMenuBar menuBar;
    private JMenuItem jMenuItem1;
    private JMenuItem jMenuItem2;
    private JMenu jMenu1;
    private JMenuItem reg1;
    private JMenuItem reg2;
    private JMenuItem reg3;
    private JScrollPane jScrollPane1;
    private JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}
